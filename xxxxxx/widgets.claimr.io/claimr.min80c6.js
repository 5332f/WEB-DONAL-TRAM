!function(e,t){function a(e){return"ronin"===e?window.ronin.provider:"swisstronik"===e?window.swisstronik.ethereum:window.ethereum}function n(e){return"okxwallet"===e?window.okxwallet.tronLink:window.okxwallet.tronLink||window.tronLink}t.claimr&&(t.onload=null,t.claimr.observer?.disconnect(),delete t.claimr);var s={url:"https://widgets.claimr.io",wc_url:"https://wc.tools.claimr.io",bsc_url:"https://bsc.tools.claimr.io",api_url:"https://prod.claimr.io",organization:"",campaign:"",debug:!1,campaign_height:0,contest_height:0,container:null,widget:null,popup:null,wc:null,bsc:null,widget_loaded:!1,popup_loaded:!1,default_route:"/campaign",attached:!1,headless:!1,connect_binance:!1,user:{name:null},is_claimr_ready:!1,_send_to_clients:e=>{s.widget?.contentWindow?.postMessage(e,"*"),s.popup_iframe?.contentWindow?.postMessage(e,"*")},_send_to_wc:e=>{s.wc_iframe?.contentWindow?.postMessage(e,"*")},_send_to_bsc:e=>{s.bsc_iframe?.contentWindow?.postMessage(e,"*")},_send_login_info:()=>{s.wallet_info&&s.widget?.contentWindow?.postMessage({event:"widget::wallet_connect",address:s.wallet_info.address,signature:s.wallet_info.signature,message:s.wallet_info.message,otag:s.organization,ptag:s.campaign},"*"),s.quest_to_open&&(s._send_to_clients({event:"widget::open_quest",cid:s.quest_to_open}),delete s.quest_to_open)},_on_claimr_ready:()=>{s.is_claimr_ready=!0,s.debug&&console.log("claimr ready"),t.postMessage({event:"widget::ready"}),s.user_token&&s._send_to_clients({event:"widget::user_token",token:s.user_token})},init:(o,d)=>{const i=e.getElementById("claimr-script");s.organization=i.getAttribute("data-organization"),s.campaign=i.getAttribute("data-campaign"),s.headless="true"===i.getAttribute("data-headless"),s.connect_binance="true"===i.getAttribute("data-binance"),s.debug="true"===i.getAttribute("data-debug");const r=i.getAttribute("data-ref")||localStorage?.getItem("claimr-ref")||sessionStorage?.getItem("claimr-ref")||null;if(!s.headless){const c=i.getAttribute("data-addons"),l=d||i.getAttribute("data-user-token"),_=o||i.getAttribute("data-contest-id"),p=!!i.getAttribute("data-autoresize"),g=i.getAttribute("data-ga4"),u=i.getAttribute("data-env"),w=i.getAttribute("data-route"),m=i.getAttribute("data-theme-key"),h=m&&localStorage?.getItem(m)?localStorage?.getItem(m):i.getAttribute("data-theme"),v=i.getAttribute("data-platform"),f=i.getAttribute("data-device"),b=i.getAttribute("data-gtm"),y=["utm_source","utm_medium","utm_campaign","utm_term","utm_content"],k=i.getAttribute("data-container");s.container=e.getElementById(k);const $=()=>{try{let o=null;try{if(g){const t=e.cookie.split("; ").find((e=>e.startsWith("_ga=")));t&&(o=t.split("=")[1]?.replace("GA1.1.",""))}}catch(e){}const d=new URLSearchParams(t.location.search);let i=c?.replace(/\s+/g,"").split(",").map((e=>e.trim()))||[],k=i.map((e=>`${e}=1`));d.forEach(((e,t)=>{k.push(`${t}=${e}`)}));const $=()=>{if(!y.map((e=>d.get(e))).some((e=>!!e)))for(const e of y){const t=localStorage?.getItem(e)||sessionStorage?.getItem(e);t&&k.push(`${e}=${t}`)}};$(),r&&k.push(`ref=${r}`),l&&k.push(`utkn=${l}`),g&&k.push(`ga4=${g}`),b&&k.push(`gtm=${b}`),o&&k.push(`ga4cid=${o}`),"dev"===u&&k.push(`env=${u}`),s.debug&&k.push("dcl=1"),_&&k.push("hcb=1"),h&&k.push(`theme=${h}`),v&&k.push(`platform=${v}`),f&&k.push(`device=${f}`);const A=c?.includes("pvm")&&(w||s.default_route)===s.default_route,x=k.length>0?`?${k.join("&")}`:"",E=`${s.url}${w||s.default_route}/${s.organization}/${s.campaign}${_?`/${_}`:""}${x}`;if(s.widget=e.createElement("iframe"),s.widget.style="width: 100%; height: 100%; border:0;",s.widget.title="claimr-widget",s.widget.allow="clipboard-write; clipboard-read",s.widget.onload=()=>{s.widget_loaded=!0,A&&!s.popup_loaded||s._on_claimr_ready()},s.widget.src=E,s.container.style.padding_top="0px",s.container.style.padding_bottom="0px",s.container.appendChild(s.widget),t.addEventListener("message",(async t=>{if("claimr::campaign::loaded"===t.data.event)s._send_login_info();else if("login::custom"===t.data.event)s.on_custom_login();else if("contest::open"===t.data.event)s.on_contest_open();else if("navigate::open"===t.data.event)window.open(t.data.url,t.data.target,t.data.features);else if("widget::logout"===t.data.event)s._send_to_clients({...t.data}),delete s.user_token,delete s.wallet_info,s.on_logout();else if("wallet_connect::closed"===t.data.event)e.body.style.overflow="initial",s.wc.style.display="none";else if("wallet_connect::connect"===t.data.event)e.body.style.overflow="hidden",s.wc.style.display="block",s._send_to_wc({...t.data});else if("wallet_connect::disconnect"===t.data.event||"wallet_connect::sign"===t.data.event||"wallet_connect::request"===t.data.event||"wallet_connect::proof"===t.data.event)s._send_to_wc({...t.data});else if("binance::closed"===t.data.event)e.body.style.overflow="initial",s.bsc.style.display="none";else if("binance::connect"===t.data.event)e.body.style.overflow="hidden",s.bsc.style.display="block",s._send_to_bsc({...t.data});else if("binance::disconnect"===t.data.event||"binance::sign"===t.data.event||"binance::request"===t.data.event)s._send_to_bsc({...t.data});else if("wallet_connect::disconnected"===t.data.event||"wallet_connect::addresses"===t.data.event||"wallet_connect::signature"===t.data.event||"wallet_connect::hash"===t.data.event||"binance::disconnected"===t.data.event||"binance::addresses"===t.data.event||"binance::signature"===t.data.event||"binance::hash"===t.data.event)s._send_to_clients({...t.data});else if("ccd::providers_list"===t.data.event)s._send_to_clients({event:"ccd::providers",concordium:!!window.concordium});else if("ccd::connect"===t.data.event){const e=window.concordium;if(e)try{const t=await e.requestAccounts();s._send_to_clients({event:"ccd::address",address:t?.[0]||""})}catch(e){s._send_to_clients({event:"ccd::address",address:""})}}else if("ccd::sign"===t.data.event){const e=window.concordium;if(e)try{const a=await e.signMessage(t.data.address,t.data.message);s._send_to_clients({event:"ccd::signature",address:t.data.address,signature:a?.[0]?.[0]||""})}catch(e){console.error(e),s._send_to_clients({event:"ccd::signature",address:t.data.address,signature:""})}}else if("polkadot::providers_list"===t.data.event)s._send_to_clients({event:"polkadot::providers",talisman:!!window.injectedWeb3?.talisman,subwallet:!!window.injectedWeb3?.["subwallet-js"]});else if("polkadot::connect"===t.data.event){const e=window.injectedWeb3?.talisman||window.injectedWeb3?.["subwallet-js"];if(e)try{const t=await e.enable(),a=await t.accounts.get();s._send_to_clients({event:"polkadot::address",address:a?.[0]?.address||""})}catch(e){s._send_to_clients({event:"polkadot::address",address:""})}}else if("polkadot::sign"===t.data.event){const e=window.injectedWeb3?.talisman||window.injectedWeb3?.["subwallet-js"];if(e)try{const a=await e.enable(),n=a?.signer?.signRaw,o=n?await n({address:t.data.address,data:t.data.message,type:"bytes"}):"";s._send_to_clients({event:"polkadot::signature",address:t.data.address,signature:o?.signature||""})}catch(e){console.error(e),s._send_to_clients({event:"polkadot::signature",address:t.data.address,signature:""})}}else if("cosmos::providers_list"===t.data.event)s._send_to_clients({event:"cosmos::providers",keplr:!!window.keplr,leap:!!window.leap});else if("cosmos::connect"===t.data.event){const e=window.keplr||window.leap;if(e)try{await e.enable(t.data.reference);const a=await e.getOfflineSigner(t.data.reference).getAccounts();s._send_to_clients({event:"cosmos::address",address:a?.[0]?.address||"",reference:t.data.reference})}catch(e){s._send_to_clients({event:"cosmos::address",address:"",reference:t.data.reference})}}else if("cosmos::sign"===t.data.event){const e=window.keplr||window.leap;if(e)try{const a=await e.signArbitrary(t.data.reference,t.data.address,t.data.message);s._send_to_clients({event:"cosmos::signature",address:t.data.address,reference:t.data.reference,signature:a?.signature||""})}catch(e){console.error(e),s._send_to_clients({event:"cosmos::signature",address:t.data.address,reference:t.data.reference,signature:""})}}else if("solana::providers_list"===t.data.event)s._send_to_clients({event:"solana::providers",solana:!!window.solana,phantom:!!window.phantom?.solana,solflare:!!window.solflare});else if("solana::connect"===t.data.event){const e=window.solana||window.phantom?.solana||window.solflare;if(e)try{const t=await e.connect();s._send_to_clients({event:"solana::address",address:t?.publicKey?t.publicKey.toString():e.publicKey.toString()})}catch(e){s._send_to_clients({event:"solana::address",address:""})}}else if("solana::sign"===t.data.event){const e=window.solana||window.phantom?.solana||window.solflare;if(e)try{const a=await e.signMessage((new TextEncoder).encode(t.data.message),"utf8");s._send_to_clients({event:"solana::signature",address:t.data.address,signature:a?.signature})}catch(e){console.error(e),s._send_to_clients({event:"solana::signature",address:t.data.address,signature:""})}}else if("eip155::providers_list"===t.data.event)s._send_to_clients({event:"eip155::providers",ethereum:!!window.ethereum,metamask:!!window.ethereum?.isMetaMask,binance:!!window.ethereum?.isBinance,ronin:!!window.ronin?.provider,swisstronik:!!window.swisstronik?.ethereum});else if("eip155::connect"===t.data.event){const e=a(t.data.wallet_name);if(e)try{const a=await e.request({method:"eth_requestAccounts"});s._send_to_clients({event:"eip155::address",address:a[0],wallet_name:t.data.wallet_name})}catch(e){s._send_to_clients({event:"eip155::address",address:""})}}else if("eip155::sign"===t.data.event){const e=a(t.data.wallet_name);if(e)try{const a=`0x${function(e){const t=(new TextEncoder).encode(e);let a="";for(let e of t)a+=e.toString(16).padStart(2,"0");return a}(t.data.message)}`,n=await e.request({method:"personal_sign",params:[a,t.data.address]});s._send_to_clients({event:"eip155::signature",address:t.data.address,signature:n})}catch(e){s._send_to_clients({event:"eip155::signature",address:t.data.address,signature:""})}}else if("eip155::request"===t.data.event){const e=a(t.data.wallet_name);if(e)try{try{await e.request({method:"wallet_switchEthereumChain",params:[{chainId:t.data.chain_id}]})}catch(a){if(4902===a.code)try{await e.request({method:"wallet_addEthereumChain",params:[{chainId:t.data.chain_id,chainName:t.data.chain_name,rpcUrls:[t.data.chain_rpc],blockExplorerUrls:[t.data.chain_scan],nativeCurrency:{name:t.data.token_name,symbol:t.data.token_symbol,decimals:18}}]})}catch(e){}}const a=await e.request(t.data.request);s._send_to_clients({event:"eip155::hash",address:t.data.address,hash:a})}catch(e){s._send_to_clients({event:"eip155::hash",address:t.data.address,hash:""})}}else if("tron::providers_list"===t.data.event)s._send_to_clients({event:"tron::providers",okxwallet:!!window.okxwallet?.tronLink});else if("tron::connect"===t.data.event){const e=n(t.data.wallet_name);if(e)try{200===(await e.request({method:"tron_requestAccounts"})).code?s._send_to_clients({event:"tron::address",address:e.tronWeb.defaultAddress.base58,wallet_name:t.data.wallet_name}):s._send_to_clients({event:"tron::address",address:""})}catch(e){s._send_to_clients({event:"tron::address",address:""})}}else if("tron::sign"===t.data.event){const e=n(t.data.wallet_name);if(e)try{const a=await e.tronWeb.trx.sign(t.data.message);s._send_to_clients({event:"tron::signature",address:t.data.address,signature:a})}catch(e){s._send_to_clients({event:"tron::signature",address:t.data.address,signature:""})}}})),p&&t.addEventListener("message",(e=>{"contest::height"===e.data.event?e.data.height>0&&!A&&(s.contest_height=e.data.height,s.container.style.height=`${s.contest_height}px`):e.data.event===`${(w||s.default_route).replace("/","")}::height`?e.data.height>0&&e.source===s.widget.contentWindow&&(s.campaign_height=e.data.height,s.container.style.height=`${s.campaign_height}px`):"contest::close"===e.data.event&&(s.container.style.height=`${s.campaign_height}px`)})),A){k=i.filter((e=>"shc"!==e&&"sur"!==e)).map((e=>`${e}=1`)),$(),d.forEach(((e,t)=>{k.push(`${t}=${e}`)})),b&&k.push(`gtm=${b}`),k.push("ccl=1"),r&&k.push(`ref=${r}`),l&&k.push(`utkn=${l}`),g&&k.push(`ga4=${g}`),o&&k.push(`ga4cid=${o}`),"dev"===u&&k.push(`env=${u}`),s.debug&&k.push("dcl=1"),h&&k.push(`theme=${h}`),v&&k.push(`platform=${v}`),f&&k.push(`device=${f}`);let a=null;e.getElementById("claimr-contest-popup")||(a=e.createElement("iframe"),a.style="width: 100%; height: 100%; border: 0;",a.title="claimr-contest",a.allow="clipboard-write; clipboard-read",a.onload=()=>{s.popup_loaded=!0,s.widget_loaded&&s._on_claimr_ready()},a.src=`${s.url}${w||s.default_route}/${s.organization}/${s.campaign}?${[...k,"popup=1","dcc=1"].join("&")}`,s.popup=e.createElement("div"),s.popup.id="claimr-contest-popup",s.popup.style="position: fixed; z-index: 1000; inset: 0px; display: none;",s.popup.appendChild(a),s.popup_iframe=a,e.body.appendChild(s.popup)),t.addEventListener("message",(t=>{"campaign::refresh"===t.data.event?s.widget.contentWindow?.postMessage({event:"campaign::refresh"},"*"):"contest::open"===t.data.event?(a?.contentWindow?.postMessage(t.data,"*"),e.body.style.overflow="hidden",s.popup.style.display="block"):"contest::close"===t.data.event&&(e.body.style.overflow="initial",s.popup.style.display="none")}))}{const t=e.createElement("iframe");t.style="width: 100%; height: 100%; border: 0;",t.title="claimr-walletconnect",t.allow="clipboard-write; clipboard-read",t.src=s.wc_url,s.wc=e.createElement("div"),s.wc.id="claimr-walletconnect-popup",s.wc.style="position: fixed; z-index: 1100; inset: 0px; display: none;",s.wc.appendChild(t),s.wc_iframe=t,e.body.appendChild(s.wc)}if(s.connect_binance){const t=e.createElement("iframe");t.style="width: 100%; height: 100%; border: 0;",t.title="claimr-binance",t.allow="clipboard-write; clipboard-read",t.src=s.bsc_url,s.bsc=e.createElement("div"),s.bsc.id="claimr-binance-popup",s.bsc.style="position: fixed; z-index: 1100; inset: 0px; display: none;",s.bsc.appendChild(t),s.bsc_iframe=t,e.body.appendChild(s.bsc)}if(m&&localStorage){const e=localStorage.setItem;localStorage.setItem=function(a,n){e.apply(this,arguments),a===m&&t.dispatchEvent(new Event("themeChanged"))},t.addEventListener("themeChanged",(e=>{s.set_theme(localStorage.getItem(m))}))}}catch(e){console.error(e)}};if(s.organization&&s.campaign&&s.container&&s.attached)$(),s.attached=!0;else{!s.attached&&s.container&&($(),s.attached=!0),s.observer=new MutationObserver((t=>{for(const a of t)"childList"===a.type&&(s.container=e.getElementById(k),s.container?s.attached||($(),s.attached=!0):s.attached=!1)}));const t={childList:!0,subtree:!0};s.observer.observe(e.body,t)}}},destroy:()=>{s.widget?.parentNode.removeChild(s.widget),s.popup?.parentNode.removeChild(s.popup),s.wc?.parentNode.removeChild(s.wc),s.bsc?.parentNode.removeChild(s.bsc),t.onload=null,s.observer?.disconnect(),s.widget_loaded=!1,s.popup_loaded=!1,s.is_claimr_ready=!1,delete s.user_token,delete s.wallet_info},on_contest_open:()=>{},on_custom_login:()=>{},on_logout:()=>{},open_contest:t=>{s.popup?(s.popup_iframe?.contentWindow?.postMessage({event:"contest::open",cid:t},"*"),e.body.style.overflow="hidden",s.popup.style.display="block"):s.widget?.contentWindow?.postMessage({event:"contest::open",cid:t},"*")},set_theme:e=>{s._send_to_clients({event:"widget::theme",theme:e})},set_user_token:e=>{s._send_to_clients({event:"widget::user_token",token:e}),s.user_token=e},login:()=>{s._send_to_clients({event:"widget::parent_login"})},logout:()=>{s._send_to_clients({event:"widget::logout"}),delete s.user_token,delete s.wallet_info,s.on_logout()},connect_wallet:(e,t,a)=>{if(s.headless){const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({address:e,message:a,signature:t,otag:s.organization,ptag:s.campaign})};fetch(`${s.api_url}/auth/wallet/ref`,n).catch((e=>{console.error("claimr: failed to connect a wallet:",e)}))}else s.widget?.contentWindow?.postMessage({event:"widget::wallet_connect",address:e,signature:t,message:a,otag:s.organization,ptag:s.campaign},"*"),s.wallet_info={address:e,signature:t,message:a}},complete_task:(e,t)=>{s.widget?.contentWindow?.postMessage({event:"widget::complete_task",aid:e,data:t},"*")},open_quest:e=>{s.quest_to_open=e,s.widget?.contentWindow?.postMessage({event:"widget::open_quest",cid:e},"*")}};t.claimr=s,e.body?s.init():t.onload=()=>s.init(),t.postMessage({event:"claimr::ready"})}(document,window);